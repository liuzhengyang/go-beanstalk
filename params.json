{
  "name": "Gobeanstalk",
  "tagline": "beanstalk client for go",
  "body": "# [gobeanstalk](https://github.com/liuzhengyang/gobeanstalk) is a [beanstalkd](https://github.com/kr/beanstalkd) client for Go.\r\n\r\n[![Join the chat at https://gitter.im/go-beanstalk/Lobby](https://badges.gitter.im/go-beanstalk/Lobby.svg)](https://gitter.im/go-beanstalk/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n[![travis status](https://travis-ci.org/liuzhengyang/gobeanstalk.svg?branch=master)](https://travis-ci.org/liuzhengyang/gobeanstalk)\r\n\r\n[中文文档] (./README-zh_CN.md)\r\n\r\nNow it's a quite simple implementation. I'll keep improving and refactoring it.\r\n\r\n# Introduction\r\n[beanstalkd](https://github.com/kr/beanstalkd) is a fast, general-purpose work queue.\r\nDifference with crontab jobs:\r\nContab job run with specified period or at some point. But beanstalk can run with a delayed time.\r\n\r\nSome use scenarios:\r\n* Check whether user finish the order in 5 minutes.\r\n* Start a process in one minutes.\r\n\r\n# How to use\r\n\r\n## Mac\r\n### Install And Start Beanstalk server\r\n```\r\ngit clone https://github.com/kr/beanstalkd\r\ncd beanstalkd\r\nmake\r\n./beanstalkd\r\n```\r\n\r\n# Examples\r\n```\r\ngo get github.com/liuzhengyang/gobeanstalk\r\n```\r\n\r\ncreate a test.go file\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"github.com/liuzhengyang/gobeanstalk\"\r\n)\r\n\r\nfunc main() {\r\n\taddr := \"localhost:11300\"  // define server address\r\n\tnewConn := gobeanstalk.NewConnection(addr)   // create new connection\r\n\tchannel := make(chan int)   // create int channel\r\n\tputFunc := func() {\r\n\t\t// define a function which put some message to one tube\r\n\t\tid, _ := newConn.PutWithTube(\"hello\", \"test2\", 1)\r\n\t\tchannel <- id\r\n\t}\r\n\tgo putFunc()   // run previous function in a go-routine\r\n\tid := <-channel  // wait until we finish putting\r\n\tfmt.Printf(\"Receive from channel message of another goroutine %d\\n\", id)\r\n\tlistenChannel := make(chan string)  // make a listen channel for receiving results\r\n\tdealFunc := func(body string) bool {\r\n\t\t// define a function to deal with tube messages\r\n\t\tfmt.Printf(\"receive %s\\n\", body)\r\n\t\tlistenChannel <- body\r\n\t\treturn true\r\n\t}\r\n\tgo newConn.Listen(\"test2\", dealFunc)  // run deal function in a specified go-routing\r\n\tbody := <-listenChannel     // wait our message\r\n\tfmt.Printf(\"Listen once %s\\n\", body)\r\n\tnewConn.Close()   // Close connection\r\n}\r\n\r\n```\r\n\r\nAnd run this \r\n```\r\ngo run test.go\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}